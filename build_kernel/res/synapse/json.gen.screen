#!/system/bin/sh

BB=/system/xbin/busybox;

cat << CTAG
{
    name:SCREEN,
    elements:[
	{ SLiveLabel:{
		title:"Lux",
		description:"Live ambient light value as read from the light sensor",
		refresh:500,
		action:"live lux"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SLiveLabel:{
		title:"Display brightness",
		description:"Live panel brightness value 0-255",
		refresh:500,
		action:"live actual_brightness"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SPane:{
		title:"ALPM (Aggressive Link Power Management)",
		description:"ALPM is a mechanism for reducing SSD/HDD power consumption. If ALPM is enabled, SSD goes into low-power mode when SSD has no I/O activity. On I/O request, SSD power is resumed. More info: <a href='http://www.fit-pc.com/wiki/index.php/Aggressive_Link_Power_Management_(ALPM)'>Wiki</a>"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"LCD ALPM",
		description:"Auto: use with Edge panel in a dim light environment or where an Always on Display is active. Will only auto enable if screen is OFF (if not in-call) & below the Lux threshold, and then auto disable when screen is ON or above the Lux threshold. Requires CortexBrain ENABLED !\n",
		default:$(echo "$(/res/synapse/actions/cortex cortexbrain_alpm_auto)"),
		action:"cortex cortexbrain_alpm_auto",
		values:[Disabled, Enabled, Auto]
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"Lux threshold",
		description:"Max ambient light value required to enable 'Auto' LCD ALPM. Requires CortexBrain ENABLED !\n",
		min:0, max:200, unit:" lx", step:1,
		default:$(cat /res/synapse/SkyHigh/cortexbrain_lux),
		action:"hmp /res/synapse/SkyHigh/cortexbrain_lux"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SPane:{
		title:"Sweep-2-Sleep",
		description:"Allows you to turn the screen off by swiping the screen just above the HOME key from one edge to the other in either direction."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"Enable Sweep-2-Sleep",
		description:"NOTE: Ensure PowerSuspend driver 'State' is DISABLED\n",
		default:0,
		action:"generic /sys/sweep2sleep/sweep2sleep",
		values:{
			0:"Disabled", 1:"Enabled"
		}
	}},
	{ SSpacer:{
		height:1
	}},
			`if [ -f "/sys/devices/virtual/sec/sec_touchkey/input/enabled" ] || [ -f "/sys/devices/virtual/sec/sec_touchkey/key_power_mode" ] || [ -f "/sys/devices/13900000.dsim/tk_brightness_sync" ] || [ -f "/sys/devices/virtual/sec/sec_touchkey/touchkey_brightness" ] || [ -f "/sys/module/mdnie_lite/parameters/elable_toggle_negative" ]; then
				$BB echo '{ SPane:{
					title:"Touchkey",
					description:" "
				}},'
				if [ -f "/sys/devices/virtual/sec/sec_touchkey/input/enabled" ]; then
					TK_DIS=\`$BB cat /sys/devices/virtual/sec/sec_touchkey/input/enabled\`
					$BB echo '{ SOptionList:{
						title:"Disable Touchkeys",
						description:"Completely disable touchkey events.\n",
						default:'$TK_DIS',
						action:"touchkey tk_disable",
						values:{
							0:"Disabled", 1:"Enabled"
						}
					}},'
					$BB echo '{ SSpacer:{
						height:1
					}},'
				fi
				if [ -f "/sys/devices/virtual/sec/sec_touchkey/key_power_mode" ]; then
					TK_PM=\`$BB cat /sys/devices/virtual/sec/sec_touchkey/key_power_mode\`
					$BB echo '{ SOptionList:{
						title:"Touchkey Power Mode",
						description:"Turn off the display by pressing both 'recent' and 'back' keys at the same time.\n",
						default:'$TK_PM',
						action:"generic sys/devices/virtual/sec/sec_touchkey/key_power_mode",
						values:{
							0:"Disabled", 1:"Enabled"
						}
					}},'
					$BB echo '{ SSpacer:{
						height:1
					}},'
				fi
				if [ -f "/sys/devices/13900000.dsim/tk_brightness_sync" ]; then
					TK_SYNC=\`$BB cat /sys/devices/13900000.dsim/tk_brightness_sync\`
					$BB echo '{ SOptionList:{
						title:"Adaptive Touchkey Brightness",
						description:"Touchkey brightness changes with panel AUTO brightness at the same time.\n",
						default:'$TK_SYNC',
						action:"touchkey tk_brightness_sync",
						values:{
							0:"Disabled", 1:"Enabled"
						}
					}},'
					$BB echo '{ SSpacer:{
						height:1
					}},'
				fi
				if [ -f "/sys/devices/virtual/sec/sec_touchkey/touchkey_brightness" ]; then
					TK_BRT=\`$BB cat /sys/devices/virtual/sec/sec_touchkey/touchkey_brightness\`
					if [ "$TK_BRT" != "" ]; then
						$BB echo '{ SSeekBar:{
							title:"Touchkey Brightness",
							description:"Manually set the desired touchkey brightness. Requires Adaptive Touchkey Brightness DISABLED!\n",
							min:2600, max:3300, unit:"", step:25,
							default:'$TK_BRT',
							action:"touchkey res/synapse/SkyHigh/tk_brightness",
						}},'
						$BB echo '{ SSpacer:{
							height:1
						}},'
					fi
				fi
				if [ -f "/sys/module/mdnie_lite/parameters/elable_toggle_negative" ]; then
					NEG=\`$BB cat /sys/module/mdnie_lite/parameters/elable_toggle_negative\`
					$BB echo '{ SOptionList:{
						title:"Negative Effect Toggle",
						description:"Toggle by quickly tapping the multi-tasking button x4.\n",
						default:'$NEG',
						action:"generic sys/module/mdnie_lite/parameters/elable_toggle_negative",
						values:{
							0:"Disabled", 1:"Enabled"
						}
					}},'
					$BB echo '{ SSpacer:{
						height:1
					}},'
				fi
			fi`
    ]
}
CTAG
