#!/system/bin/sh
#
# Copyright (c) 2017 UpInTheAir. All rights reserved.
#
# Authors:	UpInTheAir
#
# This software and associated documentation files (the "Software")
# is proprietary of UpInTheAir. No part of this Software, either
# material or conceptual may be copied or distributed, transmitted,
# transcribed, stored in a retrieval system or translated into any
# human or computer language in any form by any means, electronic,
# mechanical, manual or otherwise, or disclosed to third parties
# without the express written permission of UpInTheAir.
#
# Alternatively, this program is free software in case of open
# source project:
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this Software, to redistribute the Software
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

cat << CTAG
{
    name:ADVANCED,
    elements:[
	{ SPane:{
		title:"Kernel Entropy"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SLiveLabel:{
		title:"Entropy Available",
		refresh:1000,
		action:"live entropy"
	}},
	{ SSeekBar:{
		title:"Read Wakeup Threshold",
		description:" ",
		max:2048, min:64, step:64,
		default:$(cat /proc/sys/kernel/random/read_wakeup_threshold),
		action:"generic /proc/sys/kernel/random/read_wakeup_threshold"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"Write Wakeup Threshold",
		description:" ",
		max:2048, min:64, step:64,
		default:$(cat /proc/sys/kernel/random/write_wakeup_threshold),
		action:"generic /proc/sys/kernel/random/write_wakeup_threshold"
	}},
	{ SSpacer:{
		height:2
	}},
	{ SPane:{
		title:"Gentle Fair Sleepers",
		description:"Sleeper Fairness is a concept used by CFS which treat sleeping/waiting tasks as if they were in a run queue. This implies tasks which spend most of the time waiting for an user input and such will get a fair share of CPU when they need it. Disabling Gentle Fair Sleepers could improve UI responsiveness."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"Gentle Fair Sleepers",
		description:" ",
		default:0,
		action:"generic /sys/kernel/sched/gentle_fair_sleepers",
		values:{
			0:"Disabled", 1:"Enabled"
		}
	}},
	{ SSpacer:{
		height:2
	}},
	{ SPane:{
		title:"Arch Power",
		description:"Arch Power uses arch dependent power functions to be used instead of generic high resolution timer ticks and double ticks to reflect the relative capacity of each core."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"Arch Power",
		description:" ",
		default:1,
		action:"generic /sys/kernel/sched/arch_power",
		values:{
			0:"Disabled", 1:"Enabled"
		}
	}},
	{ SSpacer:{
		height:2
	}},
	{ SPane:{
		title:"Randomisation",
		description:"Disabling (0) virtual address randomisation may improve GUI responsiveness."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"Randomize va Space",
		description:" ",
		max:2,
		min:0,
		step:1,
		default:$(cat /proc/sys/kernel/randomize_va_space),
		action:"generic /proc/sys/kernel/randomize_va_space"
	}},
	{ SSpacer:{
		height:2
	}},
	{ SPane:{
		title:"PM Freeze Timeout",
		description:"Controls how long it will cost at most to freeze all user space processes or all freezable kernel threads.",
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"Freeze Timeout",
		description:" ",
		unit:" sec",
		max:2000,
		min:1000,
		step:100,
		weight:0.001,
		default:$(cat /sys/power/pm_freeze_timeout),
		action:"generic /sys/power/pm_freeze_timeout"
	}},
	{ SSpacer:{
		height:2
	}},
    ]
}
CTAG
