#!/system/bin/sh

BB=/system/xbin/busybox;

cat << CTAG
{
    name:MULTICORE,
    elements:[
	{ SPane:{
		title:"Hotplug Display State",
		description:"If enabled, you can reduce the power consumption of Always on Display application or Edge display by allowing cores to hotplug off and sleep."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SDescription:{
		description:"WARNING: Underclock of CPU min frequencies whilst hotplug state enabled may cause instabilty."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"Hotplug",
		description:"Force LCD 'state' OFF when screen is OFF & hotplug cores whilst screen is ON. Enable only if other Multicore & Interactive Turbo Modes are disabled !\n",
		default:$(echo "$(/res/synapse/actions/hmp hotplug)"),
		action:"hmp hotplug",
		values:[Disabled, Enabled,]
	}},
	{ SSpacer:{
		height:2
	}},
	{ SPane:{
		title:"CPUsets",
		description:"Manage CPUSETs which allow dynamically partitioning a system into sets of CPUs and Memory Nodes and assigning tasks to run only within those sets."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"Invisible CPUset",
		description:"Enabling this option will let you create and manage the Invisible CPUset. This reduces background overhead and overall power consumption by allowing assigned background apps (oom_adj > 1) to run only within this set. Changing this value requires REBOOT.\n",
		default:$(cat /data/.SkyHigh/invisible_cpuset),
		action:"generic /data/.SkyHigh/invisible_cpuset",
		values:{
			0:"Disabled", 1:"Enabled"
		}
	}},
	{ SSpacer:{
		height:2
	}},
		`if [ -f "/dev/cpuset/invisible/cpus" ]; then
			INVISIBLE=\`$BB cat /dev/cpuset/invisible/cpus\`
			$BB echo '{ SOptionList:{
				title:"Move Invisible Apps to A53",
				description:"Selecting A53 Cores will improve battery life by prohibiting all background applications from using big (A57) cores. Background applications such as music may cause weird behaviors.\n",
				default:'$INVISIBLE',
				action:"hmp dev/cpuset/invisible/cpus",
				values:{
					0-3:"A53 Cores", 0-7:"All Cores"
				}
			}},'
			$BB echo '{ SSpacer:{
				height:2
			}},'
		fi`
	{ SPane:{
		title:"HMP Threshold Up / Down Ratios for Task Migrating",
		description:"Adjust HMP ratios for up/down scaling for tasks migrating between A53 LITTLE cores and A57 big cores. Higher up-threshold values use less battery because use more of the power efficient Little cores."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"Profile",
		description:"Select your profile for HMP thresholds.\n",
		default:$(echo "$(/res/synapse/actions/tuning hmp)"),
		action:"tuning hmp",
		values:[Default, Performance, Stock,],
		notify:[
			{
				on:APPLY,
				do:[ REFRESH, APPLY ],
				to:[
					"hmp /sys/kernel/hmp/up_threshold",
					"hmp /sys/kernel/hmp/down_threshold"
				],
			}
		]
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"Up Threshold",
		description:"Min load required for migrating tasks to the faster A57 big cores.\n",
		min:1, max:1000, unit:"", step:1,
		default:$(cat /sys/kernel/hmp/up_threshold),
		action:"hmp /sys/kernel/hmp/up_threshold"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"Down Threshold",
		description:"Max load allowed for tasks migrating to the slower A53 little cores.\n",
		min:1, max:512, unit:"", step:1,
		default:$(cat /sys/kernel/hmp/down_threshold),
		action:"hmp /sys/kernel/hmp/down_threshold"
	}},
	{ SSpacer:{
		height:2
	}},
	{ SPane:{
		title:"HMP Up / Down Hysteresis",
		description:"Maximum total capacity difference in percentage to enact scheduler power migration."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"Up Hysteresis",
		description:"Lower = faster migration response (more battery drain).\n",
		min:1, max:1000, unit:"", step:1,
		default:$(cat /sys/kernel/hmp/up_perf_hysteresis),
		action:"generic /sys/kernel/hmp/up_perf_hysteresis"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"Down Hysteresis",
		description:"Lower = faster migration response (more battery drain).\n",
		min:1, max:1000, unit:"", step:1,
		default:$(cat /sys/kernel/hmp/down_perf_hysteresis),
		action:"generic /sys/kernel/hmp/down_perf_hysteresis"
	}},
	{ SSpacer:{
		height:2
	}},
        { SPane:{
                title:"Power Aware Scheduling",
                description:"Power aware scheduling is a CPU capacity managing 'power scheduler' which lives by the side of the existing process scheduler. Its role is to monitor the system load and decide which CPUs that should be available to the process scheduler. It will basically attempt to “pack” small tasks into the “leftmost” CPU cores (ie. starting cpu0) to keep the other CPU cores as idle as possible, instead of spreading them evenly across all online cores. Theoretically this should increase power efficiency, with a very small cost to performance."
        }},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"Power Migration",
		description:"'Auto' will enable Power Aware Scheduling when the screen is OFF (if not in-call) & auto disable when the screen is ON. Enable only if Hotplug & Interactive Turbo Modes are disabled ! 'Auto' requires CortexBrain ENABLED !\n",
		default:$(echo "$(/res/synapse/actions/cortex cortexbrain_power_aware_sched)"),
		action:"cortex cortexbrain_power_aware_sched",
		values:[Disabled, Enabled, Auto,]
	}},
	{ SSpacer:{
		height:2
	}},
        { SPane:{
                title:"HMP LITTLE Packing",
                description:"Allows the HMP Scheduler to pack small tasks into CPUs in the smallest HMP domain. Power savings at a slight cost to performance."
        }},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"Packing",
		description:"'Auto' will enable HMP LITTLE Packing when the screen is OFF (if not in-call) & auto disable when the screen is ON. Enable only if Hotplug & Interactive Turbo Modes are disabled ! 'Auto' requires CortexBrain ENABLED !\n",
		default:$(echo "$(/res/synapse/actions/cortex cortexbrain_hmp_little_pack)"),
		action:"cortex cortexbrain_hmp_little_pack",
		values:[Disabled, Enabled, Auto,]
	}},
	{ SSpacer:{
		height:2
	}},
	{ SPane:{
		title:"Power-Efficient Workqueues",
		description:"PEWQ are used for unbound scheduled work to save load on sibling CPU cores and queuing work on CPU 0. This helps to reduce power consumption at the cost of slight performance overhead."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"PEWQ",
		description:"'Auto' will enable PEWQ when the screen is OFF (if not in-call) & auto disable when the screen is ON. Enable only if Hotplug & Interactive Turbo Modes are disabled ! 'Auto' requires CortexBrain ENABLED !\n",
		default:$(echo "$(/res/synapse/actions/cortex cortexbrain_pewq)"),
		action:"cortex cortexbrain_pewq",
		values:[Disabled, Enabled, Auto,]
	}},
	{ SSpacer:{
		height:2
	}},
	{ SPane:{
		title:"Exynos Core Control Interface"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"Max CPU Cores",
		description:"Set the maximum number of online CPU Cores when screen is on.\n",
		default:$(cat /sys/power/cpucore_max_num_limit),
		action:"generic /sys/power/cpucore_max_num_limit",
		values:{
			"5":"5 Cores",
			"6":"6 Cores",
			"7":"7 Cores",
			"8":"8 Cores"
		}
	}},
	{ SSpacer:{
		height:2
	}},
    ]
}
CTAG
